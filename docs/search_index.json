[["index.html", "Benvida Resumo Agradecementos", " Historia I Apuntes e materiais didácticos Roberto Prado Martínez Abstract En construcción … Benvida A colección “Apuntes e materiais didácticos complementarios de Historia da Música”, pretende servir de axuda ao estudo desta materia impartida en centros de Ensinanzas Profesionais de Música de Galicia. Roberto Prado Martínez 1 Setembro 2021 Resumo En construcción … Agradecementos Este proxecto sae adiante partindo do esforzo de anos de incansable traballo pola miña parte e dende logo, non sería posible sen a axuda de toda aquela xente que durante este tempo se mantén ao meu carón, apoiando a miña labor docente no Conservatorio Profesional de Música de Viveiro (Lugo). Debo agradecer a John Gruber por ofrecer e compartir de xeito desinteresado o Markdown; a John MacFarlane por crear o Pandoc (http://pandoc.org) indispensable na conversión de Markdown a outros formatos; a Yihui Xie por crear knitr e bookdown sen os cales todo este traballo non sería posible de realizar. Un agradecemento especial a Ulrik Lyngs por crear e desenvolver o modelo oxfordown que sirve de base na elaboración, maquetación e deseño deste traballo, sen o cal sería impensable dada a súa magnitude, e como non a J.J Allaire, fundador e CEO de RStudio software empregado para a elaboración deste proxecto. "],["conceptos-previos.html", "Conceptos previos A música: concepto e significado A Historia da Música: concepto e significado Obxectivos e problemática da materia", " Conceptos previos O estudo da historia da música que interpretamos e transmitimos, así como da que escoitamos supón un aspecto de gran importancia dentro da formación de todo músico. A finalidade da Historia da Música é escoitar música, captar as características das distintas correntes estéticas de cada época, comprender a música e relacionala coas correntes estéticas, comprender e coñecer os feitos históricos e movementos socioculturais máis destacados así como o contexto no que se orixinaron, permite valorar a importancia que a música ten na sociedade e igualmente a relación entre a música e o resto de artes. Comezamos este curso facendo un percorrido histórico, artístico e musical polas épocas anteriores á actual, coa finalidade de coñecer e comprender mellor a música e os elementos que forman parte dunha obra de arte musical. Faremos un percorrido pola música de diferentes épocas e civilizacións, centrándonos na música occidental e a súa evolución ata os nosos días, tendo en conta a importanacia da cultura musical na Península Ibérica e Galicia. Nos primeiros capítulos, trataremos a orixe da música e a música na prehistoria, prestando especial atención ás primeiras evidencias conservadas de música escrita que foron descifradas e comprendidas (desde a idade da memoria); veremos as teorías sobre a música da Antigüidade e finalmente trataremos en profundidade a evolución da música escrita desde a Idade Media (idade da notación) ata o Renacemento. A música: concepto e significado Se tratamos de definir a música, poderiamos dicir que é un medio de expresión dos sentimentos humanos; unha manifestación artística e cultural dos pobos que adquire diferentes formas, valores estéticos e funcións segundo o seu contexto. En certo modo, resúltanos familiar este concepto dado que vivimos rodeados de música. Se procuramos na rede un significado tradicional de «música»1, atopamos: La música […] es el arte de organizar sensible y lógicamente una combinación coherente de sonidos y silencios respetando los principios fundamentales de la melodía, la armonía y el ritmo, […].2 A Real Adacemia Galega da lingua, define a «música» como: Arte de combinar harmoniosamente os sons, segundo unhas regras preestablecidas. Podemos concluír que, a música é unha combinación ordenada de ritmo, melodía e harmonía, agradable ao oído humano. A Historia da Música: concepto e significado Se ben o concepto de «música» pode estar máis ou menos claro, abordaremos agora o significado de «historia da música». La Historia de la música es el estudio de las diferentes tradiciones en la música y su orden en el planeta. […] aquella disciplina que trata el estudio de la evolución de las diferentes tradiciones musicales a lo largo del tiempo. Estas son algunhas ideas sobre o concepto de «historia da música», que nos aproximan ao concepto que estamos a buscar. De xeito formal, atopamos as seguintes definicións: a Real Academia Española da lingua (RAE) define textualmente «historia» como: 1.- Narración y exposición de los acontecimientos pasados y dignos de memoria, sean públicos o privados. 2.- Disciplina que estudia y narra cronológicamente los acontecimientos pasados 3.- Conjunto de los sucesos o hechos políticos, sociales, económicos, culturales, etc., de un pueblo o de una nación. 5.- Conjunto de los acontecimientos ocurridos a alguien a lo largo de su vida o en un período de ella3 a Real Adacemia Galega da lingua (RAG), define «historia»: Conxunto de feitos ocorridos no pasado, que afectan a toda a humanidade, a un grupo, unha persoa, unha institución, a unha faceta concreta dese pasado etc. Ciencia que estuda eses feitos.4 Concluiremos entón, que a finalidade da Historia da Música occidental é, entre outras: o estudo da evolución das diferentes manifestacións musicais (a tradición musical) das culturas de occidente (neste caso as culturas e sociedades musicais europeas) ao longo do tempo. Obxectivos e problemática da materia O principal obxectivo da Historia da Música é o estudo da evolución da música ao longo da historia da humanidade. Un dos problemas, que debemos afrontar na historia da música, é atopar unha definición máis ou menos aceptada e consensuada do que se entende por «música», dado que non significa e non se refire ao mesmo en tódalas culturas. Algunhas, inclúen dentro do concepto de «música» aspectos da danza, poesía, etc. e outras culturas, pola contra, non empregan ningún término para referírense á música en sí. Por outra parte, a «historia da música occidental» exclúe moitas manifestacións musicais como a música popular actual, a música tradicional europea e non europea. Exclúe tamén do seu ámbito de estudo, a música clásica oriental chinesa, xaponesa ou india. Así o seu campo de estudo redúcese, exclusivamente á “música culta” europea, a pesares de si estudar algunha música non europea que segue certos cánones europeos. Outra cuestión que influirá no concepto é a «orixe da cultura occidental». Cando comeza a cultura occidental? ou mellor dito, desde cando consideramos que comeza a cultura occidental? A actividade musical e o produto musical Unha das cuestións que teremos en conta en primeiro lugar, será diferenciar entre música como actividade e música como resultado desa actividade. En primeiro lugar, diferenciaremos a música como actividade, onde unha ou máis persoas participan creando, interpretando ou escoitando música; en comparación coa música como produto isto é, o resultado desta actividade é algo sólido, coa posibilidade de ser escrito con sistemas de notación dando como resultado unha obra musical, por exemplo. Neste caso, obtemos un produto (obra musical) resultante dunha actividade (composición). A actividade musical pode considerarse como un proceso bastante complexo, que abarca varias fases: produción, difusión e consumo. Para comprender a actividade musical, como proceso creativo, vexamos o seguinte exemplo tendo en conta as fases indicadas no parágrafo anterior: imaxinemos por un momento, que como resultado dun intre de inspiración, escribimos unha sinxela melodía que nos gusta moito e non queremos esquencer (composición) . Despois de interpretala repetidas veces, decidimos compartila en público o cal resulta todo un éxito (interpretación). Chegados a este punto, e despois do éxito da nosa creación, decidimos realizar unha xira de concertos (audición). O exemplo anterior, lévanos a relacionar as diferentes fases do proceso (produción, difusión e consumo) coas súas equivalentes actividades (composición, interpretación e audición) tal que, producimos o noso grande éxito cando compoñemos unha sinxela melodía, que difundiremos ao público por medio da interpretación e, finalmente, por medio dos concertos (audición) fomentamos o seu consumo. FASE ACTIVIDADE Produción Composición Difusión Interpretación Consumo Audición Para estudar a actividade musical historicamente (o “proceso musical”), imos centrarnos por un igual nas tres fases do proceso, polo que trataremos a produción, facendo referencia aos intérpretes, ás técnicas e sobre todo aos contextos de escoita (audición), entre outros. Música de tadición oral e notación musical A posibilidade de estudar música historicamente, baséase na existencia dunha transmisión dela ao longo do tempo (tradición oral). En case todas as culturas e tempos, a música transmitiuse por medio da escoita e posterior repetición. Isto é o que se chama transmisión oral(propio da idade da memoria) Tamén existe a posibilidade de transmitir - e almacenar - música con varios métodos de escritura musical, dando lugar a transmisión escrita (idade de notación). Música popular e «música culta» A actividade musical, prodúcese en todos os grupos sociais e nun gran número de situacións diferentes. Algunhas manifestacións musicais adquiriron un maior prestixio social, ben pola súa relación e vinculación coa alta sociedade, ben polas súas características de formación e profesionalización. Estamos a diferencar música académica, tamén coñecida como “clásica” ou “culta”, fronte a unha enorme variedade de música popular, normalmente considerada de menor prestixio. O estudo da música debería abarcar todos os estilos, pero neste caso trataremos só o estudo dos estilos académicos. O enfoque eurocéntrico Cando estudamos a historia da música, adoitamos centrarnos en produtos musicais escritos da tradición académica europea, polo que acurtamos drasticamente o obxecto de estudo. O resto - actividade musical, transmisión oral, música popular ou non europea - son obxecto de estudo da etnomusicoloxía, que normalmente non aplica o enfoque histórico. Este enfoque “eurocéntrico” da Historia da Música, deixa fóra numerosas manifestacións musicais, tanto académicas como populares de fóra de Europa, que nalgúns casos tiveron unha forte influencia no propio desenvolvemento da música europea; se ben teremos en consideración, que foi no continente europeo onde se crearon os principais tratados e estudos sobre música. 0.0.1 Cánon e repertorio Ao longo do século XIX desenvolvéronse dúas ideas ou conceptos importantes: o canon e o repertorio. O primeiro refírese ao conxunto de compositores e obras obxecto de estudo; o segundo é o conxunto de obras que, por unha ou outra razón, seguimos interpretando e escoitando. Ámbolos dous conceptos derivan de certos criterios de “calidade musical” malia que é certo que son, á súa vez, produtos culturais europeos creados en contextos políticos, sociais e ideolóxicos específicos. O feito de que se exclúa a música non europea ou popular, fainos pensar na discriminación étnica e de clase, que mantiveron certos musicólogos, intérpretes, críticos, (…) do século XIX. A exclusión do canon da muller como compositora, é outro exemplo destes prexuízos e discriminación [^cita:exclusión_muller], así como o silencio ao que foron sometidos aqueles compositores [^cita:exclusión_compo] que non se axustaban ao modelo ou idea de evolución da música occidental da época. Sen dúbida, outra das ideas que marcaron este concepto de canon foi a valoración dos nacionalismos,5 que explica así que predominase certa música sobre outra. Os gregos definen a música como «a arte das musas»↩︎ Definición de música consultada na wikipedia.↩︎ Definición de historia, RAE consultado en https://www.rae.es , (Setembro, 2020).↩︎ Definición de historia, RAG consultado en https://academia.gal/diccionario , (Setembro 2020)↩︎ A idea do nacional ou nacionalista tamén influíu na creación do canon. O feito de que as universidades máis importantes de finais do século XIX e principios do XX fosen as de Alemaña e que a escola historiográfica alemá dominase un período decisivo na historiografía musical, explica a abundancia de compositores xermanos no canon.↩︎ "],["orixes-da-historia-da-música-occidental.html", "1 Orixes da Historia da Música Occidental Introdución As fontes de información histórica 1.1 A orixe da música As fontes de información histórica 1.2 A música durante a Prehistoria 1.3 A música na prehistoria 1.4 A música nas primeiras civilizacións 1.5 A música no mundo clásico 1.6 Actividades 1.7 Resumo", " 1 Orixes da Historia da Música Occidental Introdución As fontes de información histórica A actividade musical é tan antiga como a especie humana. Salvo a época prehistórica, da que só se teñen vagas nocións por restos de posibles instrumentos atopados en xacementos e por pinturas rupestres, o coñecemento da música das culturas antigas ven dado polo que denominamos «fontes de información». Fontes para o estudo da Música na Prehistoria e Antigüidade En historiografía, denomínanse «fontes» a todo o que aporta información para o estudo dunha determinada cultura. No caso da Historia da Música das Civilizacións da Prehistoria e a Antigüidade, as fontes son moi variadas. Así, falaremos de fontes de tipo iconográfico, como pinturas e esculturas; documentos escritos, como xeroglíficos e inscripcións en tumbas ou templos; literarios como a Biblia, (entre outros); restos arqueolóxicos, como é o caso de fragmentos de instrumentos desa época atopados en sarcófagos. Dentro do noso ámbito de estudo, consideramos como principais fontes de información as seguintes: Arqueoloxía. Os restos arqueolóxicos proporcionan importante información sobre a música de épocas antigas. Os máis importantes son os instrumentos musicais —ou partes deles— que non se destruíron co paso do tempo; pero tamén se atopan restos de edificios e lugares onde se interpretaba música e danza. Entre os restos arqueolóxicos atópanse tamén as mostras máis antigas de notación musical. Iconografía. A pintura, a escultura e outras obras das artes visuais proporcionan información sobre instrumentos musicais, contextos e prácticas de interpretación, danzas, etc. Literatura. A literatura, entendida como o conxunto de todo o escrito, ofrece abundante información musical: algunhas fontes literarias describen escenas ou pensamentos musicais e tamén ideas sobre música; os textos da música vocal indican a estrutura rítmica, malia que non se conserven as melodías. Dentro da literatura hai que incluír tamén as obras técnicas sobre música como tratados, métodos, etc. Etnomusicoloxía. A etnomusicología, o estudo das músicas de tradición oral actuais, pode axudar á comprensión da actividade musical antiga. Aínda que non é correcto supoñer que en condicións de vida iguais desenvólvense culturas musicais iguais, ás veces o coñecemento das músicas tradicionais actuais pode proporcionar detalles sobre técnicas de interpretación de instrumentos antigos ou sobre movementos de danza, por exemplo. mermaid graph TB; Aa(Fontes de Información); B(Arqueoloxía); C(Iconografía); D(Literatura); E(Etnomusicoloxía); A--&gt;B A--&gt;C A--&gt;D A--&gt;E Case todos os libros sobre Historia da Música, comezan narrando as circunstancias da Música na Idade Media. Este feito, transmite a idea de que a orixe da música na cultura occidental está relacionado co canto gregoriano. Ata hai ben pouco, eran contados os manuais que trataban a importancia da cultura musical da Antigüidade Grega. Que pasa entón coa música anterior? Que sabemos sobre as danzas e os “concertos cortesáns” da época dos faraóns? Que instrumentos empregaban nas celebracións funerarias e nas ofrendas aos deuses? 1.1 A orixe da música As fontes de información histórica A actividade musical é tan antiga como a especie humana. Salvo a época prehistórica, da que só se teñen vagas nocións por restos de posibles instrumentos atopados en xacementos e por pinturas rupestres, o coñecemento da música das culturas antigas ven dado polo que denominamos «fontes de información». Fontes para o estudo da Música na Prehistoria e Antigüidade En historiografía, denomínanse «fontes» a todo o que aporta información para o estudo dunha determinada cultura. No caso da Historia da Música das Civilizacións da Prehistoria e a Antigüidade, as fontes son moi variadas. Así, falaremos de fontes de tipo iconográfico, como pinturas e esculturas; documentos escritos, como xeroglíficos e inscripcións en tumbas ou templos; literarios como a Biblia, (entre outros); restos arqueolóxicos, como é o caso de fragmentos de instrumentos desa época atopados en sarcófagos. Dentro do noso ámbito de estudo, consideramos como principais fontes de información as seguintes: Arqueoloxía. Os restos arqueolóxicos proporcionan importante información sobre a música de épocas antigas. Os máis importantes son os instrumentos musicais —ou partes deles— que non se destruíron co paso do tempo; pero tamén se atopan restos de edificios e lugares onde se interpretaba música e danza. Entre os restos arqueolóxicos atópanse tamén as mostras máis antigas de notación musical. Iconografía. A pintura, a escultura e outras obras das artes visuais proporcionan información sobre instrumentos musicais, contextos e prácticas de interpretación, danzas, etc. Literatura. A literatura, entendida como o conxunto de todo o escrito, ofrece abundante información musical: algunhas fontes literarias describen escenas ou pensamentos musicais e tamén ideas sobre música; os textos da música vocal indican a estrutura rítmica, malia que non se conserven as melodías. Dentro da literatura hai que incluír tamén as obras técnicas sobre música como tratados, métodos, etc. Etnomusicoloxía. A etnomusicología, o estudo das músicas de tradición oral actuais, pode axudar á comprensión da actividade musical antiga. Aínda que non é correcto supoñer que en condicións de vida iguais desenvólvense culturas musicais iguais, ás veces o coñecemento das músicas tradicionais actuais pode proporcionar detalles sobre técnicas de interpretación de instrumentos antigos ou sobre movementos de danza, por exemplo. mermaid graph TB; Aa(Fontes de Información); B(Arqueoloxía); C(Iconografía); D(Literatura); E(Etnomusicoloxía); A--&gt;B A--&gt;C A--&gt;D A--&gt;E Case todos os libros sobre Historia da Música, comezan narrando as circunstancias da Música na Idade Media. Este feito, transmite a idea de que a orixe da música na cultura occidental está relacionado co canto gregoriano. Ata hai ben pouco, eran contados os manuais que trataban a importancia da cultura musical da Antigüidade Grega. Que pasa entón coa música anterior? Que sabemos sobre as danzas e os “concertos cortesáns” da época dos faraóns? Que instrumentos empregaban nas celebracións funerarias e nas ofrendas aos deuses? 1.2 A música durante a Prehistoria 1.3 A música na prehistoria Este tema está redactado en modo texto sinxelo txt pero empregando sintase markdown para integralo no RStudio. 1.4 A música nas primeiras civilizacións 1.4.1 Exipto 1.4.2 Mesopotamia 1.4.3 O antigo Oriente 1.4.4 O pobo Hebreo 1.5 A música no mundo clásico 1.5.1 Grecia 1.5.2 Roma 1.6 Actividades 1.7 Resumo "],["rmd-basics.html", "2 R Markdown basics 2.1 Basic markdown syntax 2.2 Executable code chunks 2.3 Executable inline code 2.4 Executable code in other languages than R", " 2 R Markdown basics Here is a brief introduction to using R Markdown. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents and much, much more. R Markdown provides the flexibility of Markdown with the implementation of R input and output. For more details on using R Markdown see http://rmarkdown.rstudio.com. 2.1 Basic markdown syntax 2.1.1 Whitespace Be careful with your spacing. While whitespace largely is ignored, it does at times give markdown signals as to how to proceed. As a habit, try to keep everything left aligned whenever possible, especially as you type a new paragraph. In other words, there is no need to indent basic text in the Rmd document (in fact, it might cause your text to do funny things if you do). 2.1.2 Italics and bold Italics are done like *this* or _this_ Bold is done like **this** or __this__ Bold and italics is done like ***this***, ___this___, or (the most transparent solution, in my opinion) **_this_** 2.1.3 Inline code Inline code is created with backticks like `this` 2.1.4 Sub and superscript Sub2 and super2 script is created like this~2~ and this^2^ 2.1.5 Strikethrough Strikethrough is done ~~like this~~ 2.1.6 ‘Escaping’ (aka “What if I need an actual asterisk?”) To include an actual *, _ or \\, add another \\ in front of them: \\*, \\_, \\\\ 2.1.7 Endash (–), emdash (—) – and — with -- and --- 2.1.8 Blockquotes Do like this: Put a &gt; in front of the line. 2.1.9 Headings Section headers are created with #’s of increasing number, i.e. # First-level heading ## Second-level heading ### Etc. In PDF output, a level-five heading will turn into a paragraph heading, i.e. \\paragraph{My level-five heading}, which appears as bold text on the same line as the subsequent paragraph. 2.1.10 Lists Unordered list by starting a line with an * or a -: Item 1 Item 2 Ordered lists by starting a line with a number. Notice that you can mislabel the numbers and Markdown will still make the order right in the output: Item 1 Item 2 To create a sublist, indent the values a bit (at least four spaces or a tab): Item 1 Item 2 Item 3 Item 3a Item 3b 2.1.11 Line breaks The official Markdown way to create line breaks is by ending a line with more than two spaces. Roses are red. Violets are blue. This appears on the same line in the output, because we didn’t add spaces after red. Roses are red. Violets are blue. This appears with a line break because I added spaces after red. I find this is confusing, so I recommend the alternative way: Ending a line with a backslash will also create a linebreak: Roses are red. Violets are blue. To create a new paragraph, you put a blank line. Therefore, this line starts its own paragraph. 2.1.12 Hyperlinks This is a hyperlink created by writing the text you want turned into a clickable link in [square brackets followed by a](https://hyperlink-in-parentheses) 2.1.13 Footnotes Are created6 by writing either ^[my footnote text] for supplying the footnote content inline, or something like [^a-random-footnote-label] and supplying the text elsewhere in the format shown below:7 [^a-random-footnote-label]: This is a random test. 2.1.14 Comments To write comments within your text that won’t actually be included in the output, use the same syntax as for writing comments in HTML. That is, &lt;!-- this will not be included in the output --&gt;. 2.1.15 Math The syntax for writing math is stolen from LaTeX. To write a math expression that will be shown inline, enclose it in dollar signs. - This: $A = \\pi*r^{2}$ Becomes: \\(A = \\pi*r^{2}\\) To write a math expression that will be shown in a block, enclose it in two dollar signs. This: $$A = \\pi*r^{2}$$ Becomes: \\[A = \\pi*r^{2}\\] To create numbered equations, put them in an ‘equation’ environment and give them a label with the syntax (\\#eq:label), like this: \\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} (\\#eq:binom) \\end{equation} Becomes: \\[\\begin{equation} f\\left(k\\right)=\\binom{n}{k}p^k\\left(1-p\\right)^{n-k} \\tag{2.1} \\end{equation}\\] For more (e.g. how to theorems), see e.g. the documentation on bookdown.org 2.2 Executable code chunks The magic of R Markdown is that we can add executable code within our document to make it dynamic. We do this either as code chunks (generally used for loading libraries and data, performing calculations, and adding images, plots, and tables), or inline code (generally used for dynamically reporting results within our text). The syntax of a code chunk is shown in Figure 2.1. Figura 2.1: Code chunk syntax Common chunk options include (see e.g. bookdown.org): echo: whether or not to display code in knitted output eval: whether or to to run the code in the chunk when knitting include: whether to include anything from the from a code chunk in the output document fig.cap: figure caption fig.scap: short figure caption, which will be used in the ‘List of Figures’ in the PDF front matter IMPORTANT: Do not use underscoores in your chunk labels - if you do, you are likely to get an error in PDF output saying something like “! Package caption Error: \\caption outside float”. 2.2.1 Setup chunks - setup, images, plots An R Markdown document usually begins with a chunk that is used to load libraries, and to set default chunk options with knitr::opts_chunk$set. In your thesis, this will probably happen in index.Rmd and/or as opening chunks in each of your chapters. ```{r setup, include=FALSE} # don&#39;t show code unless we explicitly set echo = TRUE knitr::opts_chunk$set(echo = FALSE) library(tidyverse) ``` 2.2.2 Including images Code chunks are also used for including images, with include_graphics from the knitr package, as in Figure 2.2 knitr::include_graphics(&quot;figures/sample-content/beltcrest.png&quot;) Figura 2.2: Oxford logo Useful chunk options for figures include: out.width (use with a percentage) for setting the image size if you’ve got an image that gets waaay to big in your output, it will be constrained to the page width by setting out.width = \"100%\" Figure rotation You can use the chunk option out.extra to rotate images. The syntax is different for LaTeX and HTML, so for ease we might start by assigning the right string to a variable that depends on the format you’re outputting to: if (knitr::is_latex_output()){ rotate180 &lt;- &quot;angle=180&quot; } else { rotate180 &lt;- &quot;style=&#39;transform:rotate(180deg);&#39;&quot; } Then you can reference that variable as the value of out.extra to rotate images, as in Figure 2.3. Figura 2.3: Oxford logo, rotated 2.2.3 Including plots Similarly, code chunks are used for including dynamically generated plots. You use ordinary code in R or other languages - Figure 2.4 shows a plot of the cars dataset of stopping distances for cars at various speeds (this dataset is built in to R). cars %&gt;% ggplot() + aes(x = speed, y = dist) + geom_point() Figura 2.4: A ggplot of car stuff Under the hood, plots are included in your document in the same way as images - when you build the book or knit a chapter, the plot is automatically generated from your code, saved as an image, then included into the output document. 2.2.4 Including tables Tables are usually included with the kable function from the knitr package. Table ?? shows the first rows of that cars data - read in your own data, then use this approach to automatically generate tables. cars %&gt;% head() %&gt;% knitr::kable(caption = &quot;A knitr kable table&quot;) Gotcha: when using kable, captions are set inside the kable function The kable package is often used with the kableExtra package 2.2.5 Control positioning One thing that may be annoying is the way R Markdown handles “floats” like tables and figures. In your PDF output, LaTeX will try to find the best place to put your object based on the text around it and until you’re really, truly done writing you should just leave it where it lies. In general, you should allow LaTeX to do this, but if you really really need a figure to be positioned where you put in the document, then you can make LaTeX attempt to do this with the chunk option fig.pos=\"H\", as in Figure 2.5: knitr::include_graphics(&quot;figures/sample-content/beltcrest.png&quot;) Figura 2.5: An Oxford logo that LaTeX will try to place at this position in the text As anyone who has tried to manually play around with the placement of figures in a Word document knows, this can have lots of side effects with extra spacing on other pages, etc. Therefore, it is not generally a good idea to do this - only do it when you really need to ensure that an image follows directly under text where you refer to it (in this document, I needed to do this for Figure 4.1 in section 4.1.4). For more details, read the relevant section of the R Markdown Cookbook. 2.3 Executable inline code ‘Inline code’ simply means inclusion of code inside text. The syntax for doing this is `r R_CODE` For example, `r 4 + 4` will output 8 in your text. You will usually use this in parts of your thesis where you report results - read in data or results in a code chunk, store things you want to report in a variable, then insert the value of that variable in your text. For example, we might assign the number of rows in the cars dataset to a variable: num_car_observations &lt;- nrow(cars) We might then write: “In the cars dataset, we have `r num_car_observations` observations.” Which would output: “In the cars dataset, we have 50 observations.” 2.4 Executable code in other languages than R If you want to use other languages than R, such as Python, Julia C++, or SQL, see the relevant section of the R Markdown Cookbook my footnote text↩︎ This is a random test.↩︎ "],["cites-and-refs.html", "3 Citations, cross-references, and collaboration 3.1 Citations 3.2 Cross-referencing 3.3 Collaborative writing 3.4 Additional resources", " 3 Citations, cross-references, and collaboration 3.1 Citations The usual way to include citations in an R Markdown document is to put references in a plain text file with the extension .bib, in BibTex format.8 Then reference the path to this file in index.Rmd’s YAML header with bibliography: example.bib. Most reference managers can create a .bib file with you references automatically. However, the by far best reference manager to use with R Markdown is Zotero with the Better BibTex plug-in, because the citr plugin for RStudio (see below) can read references directly from your Zotero library! Here is an example of an entry in a .bib file: @article{Shea2014, author = {Shea, Nicholas and Boldt, Annika}, journal = {Trends in Cognitive Sciences}, pages = {186--193}, title = {{Supra-personal cognitive control}}, volume = {18}, year = {2014}, doi = {10.1016/j.tics.2014.01.006}, } In this entry highlighed section, ‘Shea2014’ is the citation identifier. To default way to cite an entry in your text is with this syntax: [@citation-identifier]. So I might cite some things (Shea et al. 2014; Lottridge et al. 2012). 3.1.1 PDF output In PDF output, the bibliography is handled by the OxThesis LaTeX template. If you set bib-humanities: true in index.Rmd, then in-text references will be formatted as author-year; otherwise references will be shown as numbers. If you choose author-year formatting, a number of variations on the citation syntax are useful to know: Put author names outside the parenthesis This: @Shea2014 says blah. Becomes: Shea et al. (2014) says blah. Include only the citation-year (in parenthesis) This: Shea et al. says blah [-@Shea2014] Becomes: Shea et al. says blah (2014) Add text and page or chapter references to the citation This: [see @Shea2014, pp. 33-35; also @Wu2016, ch. 1] Becomes: Blah blah (see Shea et al. 2014, 33–35; also Wu 2016, ch. 1). 3.1.2 Gitbook output In gitbook output, citations are by default inserted in the Chicago author-date format. To change the format, add csl: some-other-style.csl in index.Rmd’s YAML header. You can browse through and download styles at zotero.org/styles. 3.1.3 Insert references easily with the citr add-in For an easy way to insert citations, try the citr RStudio add-in (Figure 3.1). You can install this add-in by typing install.packages(\"citr\") in the R Console. Figura 3.1: The citr add-in 3.2 Cross-referencing We can make cross-references to sections within our document, as well as to figures (images and plots) and tables. The general cross-referencing syntax is \\@ref(label) 3.2.1 Section references Headers are automatically assigned a reference label, which is the text in lower caps separated by dashes. For example, # My header is automatically given the label my-header. So # My header can be referenced with \\@ref(my-section) Remember what we wrote in section 3.1? We can also use hyperlink syntax and add # before the label, though this is only guaranteed to work properly in HTML output: So if we write Remember what we wrote up in [the previous section](#citations)? It becomes Remember what we wrote up in the previous section? 3.2.1.1 Creating custom labels It is a very good idea to create custom labels for our sections. This is because the automatically assigned labels will change when we change the titles of the sections - to avoid this, we can create the labels ourselves and leave them untouched if we change the section titles. We create custom labels by adding {#label} after a header, e.g. # My section {#my-label}. See our chapter title for an example. That was section 3. 3.2.2 Figure (image and plot) references To refer to figures (i.e. images and plots) use the syntax \\@ref(fig:label) GOTCHA: Figures and tables must have captions if you wish to cross-reference them. Let’s add an image: knitr::include_graphics(&quot;figures/sample-content/captain.jpeg&quot;) Figura 3.2: A marvel-lous meme We refer to this image with \\@ref(fig:captain). So Figure 3.2 is this image. And in Figure 2.4 we saw a cars plot. 3.2.3 Table references To refer to tables use the syntax \\@ref(tab:label) Let’s include a table: knitr::kable(cars[1:5,], caption=&quot;Stopping cars&quot;) We refer to this table with \\@ref(tab:cars-table2). So Table ?? is this table. And in Table ?? we saw more or less the same cars table. 3.2.4 Including page numbers Finally, in the PDF output we might also want to include the page number of a reference, so that it’s easy to find in physical printed output. LaTeX has a command for this, which looks like this: \\pageref{fig/tab:label} (note: curly braces, not parentheses) When we output to PDF, we can use raw LaTeX directly in our .Rmd files. So if we wanted to include the page of the cars plot we could write: This: Figure \\@ref(fig:cars-plot) on page \\pageref(fig:cars-plot) Becomes: Figure 2.4 on page 3.2.4.1 Include page numbers only in PDF output A problem here is that LaTeX commands don’t display in HTML output, so in the gitbook output we’d see simply “Figure 2.4 on page”. One way to get around this is to use inline R code to insert the text, and use an ifelse statement to check the output format and then insert the appropriate text. So this: `r ifelse(knitr::is_latex_output(), \"Figure \\\\@ref(fig:cars-plot) on page \\\\pageref{fig:cars-plot}\", \"\")` Inserts this (check this on both PDF and gitbook): Note that we need to escape the backslash with another backslash here to get the correct output. 3.3 Collaborative writing Best practices for collaboration and change tracking when using R Markdown are still an open question. In the blog post One year to dissertate by Lucy D’Agostino, which I highly recommend, the author notes that she knits .Rmd files to a word document, then uses the googledrive R package to send this to Google Drive for comments / revisions from co-authors, then incorporates Google Drive suggestions by hand into the .Rmd source files. This is a bit clunky, and there are ongoing discussions among the R Markdown developers about what the best way is to handle collaborative writing (see issue #1463 on GitHub, where CriticMarkup is among the suggestions). For now, this is an open question in the community of R Markdown users. I often knit to a format that can easily be imported to Google Docs for comments, then go over suggested revisions and manually incorporate them back in to the .Rmd source files. For articles, I sometimes upload a near-final draft to Overleaf, then collaboratively make final edits to the LaTeX file there. I suspect some great solution will be developed in the not-to-distant future, probably by the RStudio team. 3.4 Additional resources R Markdown: The Definitive Guide - https://bookdown.org/yihui/rmarkdown/ R for Data Science - https://r4ds.had.co.nz References "],["tables.html", "4 Tables 4.1 Making LaTeX tables play nice", " 4 Tables 4.1 Making LaTeX tables play nice Dealing with tables in LaTeX can be painful. This section explains the main tricks you need to make the pain go away. (Note: if you are looking at the ebook version, you will not see much difference in this section, as it is only relevant for PDF output!) 4.1.1 Making your table pretty When you use kable to create tables, you will almost certainly want to set the option booktabs = TRUE. This makes your table look a million times better: library(knitr) library(tidyverse) head(mtcars) %&gt;% kable(booktabs = TRUE) Compare this to the default style, which looks terrible: head(mtcars) %&gt;% kable() 4.1.2 If your table is too wide You might find that your table expands into the margins of the page, like the tables above. Fix this with the kable_styling function from the kableExtra package: library(kableExtra) head(mtcars) %&gt;% kable(booktabs = TRUE) %&gt;% kable_styling(latex_options = &quot;scale_down&quot;) This scales down the table to fit the page width. 4.1.3 If your table is too long If your table is too long to fit on a single page, set longtable = TRUE in the kable function to split the table across multiple pages. a_long_table &lt;- rbind(mtcars, mtcars) a_long_table %&gt;% select(1:8) %&gt;% kable(booktabs = TRUE, longtable = TRUE) When you do this, you’ll probably want to make the header repeat on new pages. Do this with the kable_styling function from kableExtra: a_long_table %&gt;% kable(booktabs = TRUE, longtable = TRUE) %&gt;% kable_styling(latex_options = &quot;repeat_header&quot;) Unfortunately, we cannot use the scale_down option with a longtable. So if a longtable is too wide, you can either manually adjust the font size, or show the table in landscape layout. To adjust the font size, use kableExtra’s font_size option: a_long_table %&gt;% kable(booktabs = TRUE, longtable = TRUE) %&gt;% kable_styling(font_size = 9, latex_options = &quot;repeat_header&quot;) To put the table in landscape mode, use kableExtra’s landscape function: a_long_table %&gt;% kable(booktabs = TRUE, longtable = TRUE) %&gt;% kable_styling(latex_options = &quot;repeat_header&quot;) %&gt;% landscape() 4.1.4 Max power: manually adjust the raw LaTeX output For total flexibility, you can adjust the raw LaTeX output from kable/kableExtra that generates the table. Let us consider how we would do this for the example of adjusting the font size if our table is too wide: Latex has a bunch of standard commands that set an approximate font size, as shown below in Figure 4.1. Figura 4.1: Font sizes in LaTeX You could use these to manually adjust the font size in your longtable in two steps: Wrap the longtable environment in, e.g., a scriptsize environment, by doing a string replacement in the output from kable/kableExtra Add the attributes that make R Markdown understand that the table is a table (it seems R drops these when we do the string replacement) our_adjusted_table &lt;- a_long_table %&gt;% kable(booktabs = TRUE, longtable = TRUE) %&gt;% kable_styling(latex_options = &quot;repeat_header&quot;) %&gt;% # wrap the longtable in a tiny environment str_replace(&#39;\\\\\\\\begin\\\\{longtable\\\\}&#39;, &#39;\\\\\\\\begin\\\\{scriptsize\\\\}\\n\\\\\\\\begin\\\\{longtable\\\\}&#39;) %&gt;% str_replace(&#39;\\\\\\\\end\\\\{longtable\\\\}&#39;, &#39;\\\\\\\\end\\\\{longtable\\\\}\\n\\\\\\\\end\\\\{scriptsize\\\\}&#39;) #add attributes to make R Markdown treat this as a kable LaTeX table again our_adjusted_table %&gt;% structure(format = &quot;latex&quot;, class = &quot;knitr_kable&quot;) "],["customisations-and-extensions.html", "5 Customisations and extensions 5.1 Front matter 5.2 Shorten running header (PDF) 5.3 Unnumbered chapters 5.4 Beginning chapters with quotes (PDF) 5.5 Highlighting corrections (HTML &amp; PDF) 5.6 Apply custom font color and highlighting to text (HTML &amp; PDF) 5.7 Including another paper in your thesis - embed a PDF document 5.8 Including another paper in your thesis - R Markdown child document 5.9 Customizing referencing 5.10 Customizing the page headers and footers (PDF) 5.11 Diving in to the OxThesis LaTeX template (PDF) 5.12 Customising to a different university", " 5 Customisations and extensions This chapter describes a number of additional tips and tricks as well as possible customizations to the oxforddown thesis. 5.1 Front matter 5.1.1 Shorten captions shown in the list of figures (PDF) You might want your list of figures (which follows the table of contents) to have shorter (or just different) figure descriptions than the actual figure captions. Do this using the chunk option fig.scap (‘short caption’), for example {r captain-image, fig.cap=\"A very long and descriptive (and potentially boring) caption that doesn't fit in the list of figures, but helps the reader understand what the figure communicates.\", fig.scap=\"A concise description for the list of figures\" 5.1.2 Shorten captions shown in the list of tables (PDF) You might want your list of tables (which follows the list of figures in your thesis front matter) to have shorter (or just different) table descriptions than the actual table captions. If you are using knitr::kable to generate a table, you can do this with the argument caption.short, e.g.: knitr::kable(mtcars, caption = &quot;A very long and descriptive (and potentially boring) caption that doesn&#39;t fit in the list of figures, but helps the reader understand what the figure communicates.&quot;, caption.short = &quot;A concise description for the list of tables&quot;) 5.2 Shorten running header (PDF) You might want a chapter’s running header (i.e. the header showing the title of the current chapter at the top of page) to be shorter (or just different) to the actual chapter title. Do this by adding the latex command \\chaptermark{My shorter version} after your chapter title. For example, chapter 3‘s running header is simply ’Cites and cross-refs’, because it begins like this: # Citations, cross-references, and collaboration {#cites-and-refs} \\chaptermark{Cites and cross-refs} 5.3 Unnumbered chapters To make chapters unnumbered (normally only relevant to the Introduction and/or the Conclusion), follow the chapter header with {-}, e.g. # Introduction {-}. When you do this, you must also follow the heading with these two latex commands: \\adjustmtc \\markboth{The Name of Your Unnumbered Chapter}{} Otherwise the chapter’s mini table of contents and the running header will show the previous chapter. 5.4 Beginning chapters with quotes (PDF) The OxThesis LaTeX template lets you inject some wittiness into your thesis by including a block of type savequote at the beginning of chapters. To do this, use the syntax ```{block type='savequote'}.9 Add the reference for the quote with the chunk option quote_author=\"my author name\". You will also want to add the chunk option include=knitr::is_latex_output() so that quotes are only included in PDF output. It’s not possible to use markdown syntax inside chunk options, so if you want to e.g. italicise a book name in the reference use a ‘text reference’: Create a named piece of text with ‘(ref:label-name) My text’, then point to this in the chunk option with quote_author='(ref:label-name)'. 5.5 Highlighting corrections (HTML &amp; PDF) For when it comes time to do corrections, you may want to highlight changes made when you submit a post-viva, corrected copy to your examiners so they can quickly verify you’ve completed the task. You can do so like this: 5.5.1 Short, inline corrections Highlight short, inline corrections by doing [like this]{.correction} — the text between the square brackets will then be highlighted in blue in the output. Note that pandoc might get confused by citations and cross-references inside inline corrections. In particular, it might get confused by \"[what @Shea2014 said]{.correction}\" which becomes (what Shea et al. 2014 said){.correction} In such cases, you can use LaTeX syntax directly. The correction highlighting uses the soul package, so you can do like this: If using biblatex for references, use \"\\hl{what \\textcite{Shea2014} said} If using natbib for references, use \"\\hl{what \\cite{Shea2014} said} Using raw LaTeX has the drawback of corrections then not showing up in HTML output at all, but you might only care about correction highlighting in the PDF for your examiners anyway! 5.5.2 Blocks of added or changed material Highlight entire blocks of added or changed material by putting them in a block of type correction, using the syntax ```{block type='correction'}.10 Like so: For larger chunks, like this paragraph or indeed entire figures, you can use the correction block type. This environment highlights paragraph-sized and larger blocks with the same blue colour. Note that correction blocks cannot be included in word output. 5.5.3 Stopping corrections from being highlighted To turn off correction highlighting, go to the YAML header of index.Rmd, then: PDF output: set corrections: false HTML output: remove or comment out - templates/corrections.css 5.6 Apply custom font color and highlighting to text (HTML &amp; PDF) The lua filter that adds the functionality to highlight corrections adds two more tricks: you can apply your own choice of colour to highlight text, or change the font color. The syntax is as follows: Here’s [some text in pink highlighting]{highlight=\"pink\"} Becomes: Here’s some text in pink highlighting. [Here's some text with blue font]{color=\"blue\"} Becomes: Here’s some text with blue font Finally — never, ever actually do this – [here's some text with black highlighting and yellow font]{highlight=\"black\" color=\"yellow\"} Becomes: here’s some text with black highlighting and yellow font The file scripts_and_filters/colour_and_highlight.lua implements this, if you want to fiddle around with it. It works with both PDF and HTML output. 5.7 Including another paper in your thesis - embed a PDF document You may want to embed existing PDF documents into the thesis, for example if your department allows a ‘portfolio’ style thesis and you need to include an existing typeset publication as a chapter. In gitbook output, you can simply use knitr::include_graphics and it should include a scrollable (and downloadable) PDF. You will probably want to set the chunk options out.width='100%' and out.height='1000px': knitr::include_graphics(&quot;figures/sample-content/pdf_embed_example/Lyngs2020_FB.pdf&quot;) In LaTeX output, however, this approach can cause odd behaviour. Therefore, when you build your thesis to PDF, split the PDF into an alphanumerically sorted sequence of single-page PDF files (you can do this automatically with the package pdftools). You can then use the appropriate LaTeX command to insert them, as shown below (for brevity, in the oxforddown PDF sample content we’re only including two pages). Note that the chunk option results='asis' must be set. You may also want to remove margins from the PDF files, which you can do with Adobe Acrobat (paid version) and likely other software. # install.packages(pdftools) # split PDF into pages stored in figures/sample-content/pdf_embed_example/split/ # pdftools::pdf_split(&quot;figures/sample-content/pdf_embed_example/Lyngs2020_FB.pdf&quot;, # output = &quot;figures/sample-content/pdf_embed_example/split/&quot;) # grab the pages pages &lt;- list.files(&quot;figures/sample-content/pdf_embed_example/split&quot;, full.names = TRUE) # set how wide you want the inserted PDFs to be: # 1.0 is 100 per cent of the oxforddown PDF page width; # you may want to make it a bit bigger pdf_width &lt;- 1.2 # for each PDF page, insert it nicely and # end with a page break cat(stringr::str_c(&quot;\\\\newpage \\\\begin{center} \\\\makebox[\\\\linewidth][c]{\\\\includegraphics[width=&quot;, pdf_width, &quot;\\\\linewidth]{&quot;, pages, &quot;}} \\\\end{center}&quot;)) 5.8 Including another paper in your thesis - R Markdown child document Sometimes you want to include another paper you are currently writing as a chapter in your thesis. Above 5.7, we described the simplest way to do this: include the other paper as a pdf. However, in some cases you instead want to include the R Markdown source from this paper, and have it compiled within your thesis. This is a little bit more tricky, because you need to keep careful track of your file paths, but it is possible by including the paper as a child document. There are four main steps: Include the paper as a child document Make file paths compatible with knitting the article on its own, as well as when it’s include in your thesis Make header levels correct Make figure widths correct 5.8.1 An example paper in another folder Take this simple example (files for this are in this GitHub repository): |--paper_to_include | |--my_paper.Rmd | |--data | | |--cat_salt.csv | |--figures | | |--cat.jpg | |--thesis As the chart suggests, you have another folder, paper_to_include/ living in the same containing folder as your thesis folder. In the paper_to_include folder, the file my_paper.Rmd is where you write the paper. In my_paper.Rmd, you read in a CSV file found in the subfolder data/cats.csv, and also an image from the subfolder figures/cat.jpg. 5.8.2 Step 1: Include paper as a child document In your thesis folder, create an Rmd file for the chapter where you want to include another paper. Add one or more code chunks that include R Markdown files from that paper as child documents: # Including an external chapter ```{r child = &quot;../paper_to_include/my_paper.Rmd&quot;} ``` 5.8.3 Step 2: Make file paths compatible Use parameters to adjust the file path of images based on values you set in the YAML header of an R Markdown file. In my_paper.Rmd, create a parameter called other_path and set it to an empty string: --- title: &quot;A fabulous article in a different folder&quot; params: other_path: &quot;&quot; --- In my_paper.Rmd, put this at the start of the filepath when you read in data or include images: library(tidyverse) library(knitr) cat_data &lt;- read_csv(str_c(params$other_path, &quot;data/cats.csv&quot;)) include_graphics(str_c(params$other_path, &quot;figures/cat.jpg&quot;)) Finally, in your thesis folder’s index.Rmd file, also create the parameter other_path. But here, set it to where the paper_to_include/ folder is relative to your thesis folder: params: other_path: &quot;../paper_to_include/&quot; 5.8.3.1 Note on HTML output Note that if you want to host an HTML version on your thesis online, you will need to include graphics in the content that you host online - the internet obviously won’t be able to see filepaths that are just referring to stuff in another folder on your computer! 5.8.4 Step 3: Make sure header levels are correct Unless the paper you want to include is also written as a book, your header levels are probably going to be off. That is, the level 1 headers (# Some header) you use for main sections in the other paper turns into chaper titles when included in your thesis. To avoid this, first increment all heading levels by one in paper_to_include/my_paper.Rmd (# Some header -&gt; ## Some header). Then in paper_to_include/ create a lua filter that decrements header levels by one: Create a text file, save it as reduce_header_level.lua, and give it the content below. function Header(el) if (el.level &lt;= 1) then error(&quot;I don&#39;t know how to decrease the level of h1&quot;) end el.level = el.level - 1 return el end In the YAML header of paper_to_include/my_paper.Rmd, use this filter: --- title: &quot;A fabulous article in a different folder&quot; params: other_path: &quot;&quot; output: pdf_document: pandoc_args: [&quot;--lua-filter=reduce_header_level.lua&quot;] --- Now, your header levels will be correct both when you knit the paper on its own and when its included in your thesis. NOTE: There might be no need to use a lua filter to shift heading - it seems you could simply use pandoc_args: [\"--shift-heading-level-by=-1\"] (see https://pandoc.org/MANUAL.html#reader-options) 5.8.5 Step 4. Make sure figure widths are correct It might be that your figure widths when knitting your paper on its own, and when including it in your thesis, need to be different. You can again use parameters to set figure widths. Imagine you want figure width to be 80% of the page width when knitting your paper on its own, but 100% in your thesis. In paper_to_include/my_paper.Rmd, first add a parameter we could call out_width and set it to the string “80%”: --- title: &quot;A fabulous article in a different folder&quot; params: other_path: &quot;&quot; out_width: &quot;80%&quot; output: pdf_document: pandoc_args: [&quot;--lua-filter=reduce_header_level.lua&quot;] --- Then, make sure use that parameter to set the output width when you include figures in paper_to_include/my_paper.Rmd: ```{r, out.width=params$out_width, fig.cap=&quot;A very funny cat&quot;} include_graphics(str_c(params$other_path, &quot;figures/cat.jpg&quot;)) ``` Finally, create the parameter out_width in your thesis’ index.Rmd file: params: other_path: &quot;../paper_to_include/&quot; out_width: &quot;80%&quot; Now, the output width of your figure will be 80% when knitting your paper on its own, and 100% when knitting it as child document of your thesis. 5.9 Customizing referencing 5.9.1 Using a .csl file with pandoc instead of biblatex The oxforddown package uses biblatex in LaTeX for referencing. It is also possible to use pandoc for referencing by providing a .csl file in the YAML header of index.Rmd (likely requiring commenting out the biblatex code in templates/template.tex). This may be helpful for those who have a .csl file describing the referencing format for a particular journal. However, note that this approach does not support chapter bibliographies (see Section 5.9.2). csl: ecology.csl 5.9.2 Customizing biblatex and adding chapter bibliographies This section provides one example of customizing biblatex. Much of this code was combined from searches on Stack Exchange and other sources (e.g. here). In templates/template.tex, one can replace the existing biblatex calls with the following to achieve referencing that looks like this: (Charmantier and Gienapp 2014) Charmantier, A. and P. Gienapp (2014). Climate change and timing of avian breeding and migration: evolutionary versus plastic changes. Evolutionary Applications 7(1):15–28. doi: 10.1111/eva.12126. \\usepackage[backend=biber, bibencoding=utf8, refsection=chapter, % referencing by chapter style=authoryear, firstinits=true, isbn=false, doi=true, url=false, eprint=false, related=false, dashed=false, clearlang=true, maxcitenames=2, mincitenames=1, maxbibnames=10, abbreviate=false, minbibnames=3, uniquelist=minyear, sortcites=true, date=year ]{biblatex} \\AtEveryBibitem{% \\clearlist{language}% \\clearfield{note} } \\DeclareFieldFormat{titlecase}{\\MakeTitleCase{#1}} \\newrobustcmd{\\MakeTitleCase}[1]{% \\ifthenelse{\\ifcurrentfield{booktitle}\\OR\\ifcurrentfield{booksubtitle}% \\OR\\ifcurrentfield{maintitle}\\OR\\ifcurrentfield{mainsubtitle}% \\OR\\ifcurrentfield{journaltitle}\\OR\\ifcurrentfield{journalsubtitle}% \\OR\\ifcurrentfield{issuetitle}\\OR\\ifcurrentfield{issuesubtitle}% \\OR\\ifentrytype{book}\\OR\\ifentrytype{mvbook}\\OR\\ifentrytype{bookinbook}% \\OR\\ifentrytype{booklet}\\OR\\ifentrytype{suppbook}% \\OR\\ifentrytype{collection}\\OR\\ifentrytype{mvcollection}% \\OR\\ifentrytype{suppcollection}\\OR\\ifentrytype{manual}% \\OR\\ifentrytype{periodical}\\OR\\ifentrytype{suppperiodical}% \\OR\\ifentrytype{proceedings}\\OR\\ifentrytype{mvproceedings}% \\OR\\ifentrytype{reference}\\OR\\ifentrytype{mvreference}% \\OR\\ifentrytype{report}\\OR\\ifentrytype{thesis}} {#1} {\\MakeSentenceCase{#1}}} % \\renewbibmacro{in:}{} % suppress &quot;in&quot; for articles % \\renewbibmacro{in:}{% \\ifentrytype{article}{}{\\printtext{\\bibstring{in}\\intitlepunct}}} %-- no &quot;quotes&quot; around titles of chapters/article titles \\DeclareFieldFormat[article, inbook, incollection, inproceedings, misc, thesis, unpublished] {title}{#1} %-- no punctuation after volume \\DeclareFieldFormat[article] {volume}{{#1}} %-- puts number/issue between brackets \\DeclareFieldFormat[article, inbook, incollection, inproceedings, misc, thesis, unpublished] {number}{\\mkbibparens{#1}} %-- and then for articles directly the pages w/o any &quot;pages&quot; or &quot;pp.&quot; \\DeclareFieldFormat[article] {pages}{#1} %-- for some types replace &quot;pages&quot; by &quot;p.&quot; \\DeclareFieldFormat[inproceedings, incollection, inbook] {pages}{p. #1} %-- format 16(4):224--225 for articles \\renewbibmacro*{volume+number+eid}{ \\printfield{volume}% \\printfield{number}% \\printunit{\\addcolon} } If you would like chapter bibliographies, in addition insert the following code at the end of each chapter, and comment out the entire REFERENCES section at the end of template.tex. \\printbibliography[segment=\\therefsection,heading=subbibliography] 5.10 Customizing the page headers and footers (PDF) This can now be done directly in index.Rmd’s YAML header. If you are a LaTeX expert and need further customisation that what’s currently provided, you can tweak the relevant sections of templates/template.tex - the relevant code is beneath the line that begins \\usepackage{fancyhdr}. 5.11 Diving in to the OxThesis LaTeX template (PDF) For LaTeX minded people, you can read through templates/template.tex to see which additional customisation options are available as well as templates/ociamthesis.cls which supplies the base class. For example, template.tex provides an option for master’s degree submissions, which changes identifying information to candidate number and includes a word count. At the time of writing, you must set this directly in template.tex rather than from the YAML header in index.Rmd. 5.12 Customising to a different university 5.12.1 The minimal route If the front matter in the OxThesis LaTeX template is suitable to your university, customising oxforddown to your needs could be as simple as putting the name of your institution and the path to your university’s logo in index.Rmd: university: University of You university-logo: figures/your-logo-here.pdf 5.12.2 Replacing the entire title page with your required content If you have a .tex file with some required front matter from your university that you want to replace the OxThesis template’s title page altogether, you can provide a filepath to this file in index.Rmd. oxforddown’s sample content includes and example of this — if you use the YAML below, your front matter will look like this: alternative-title-page: front-and-back-matter/alt-title-page-example.tex References "],["troubleshooting.html", "6 Troubleshooting 6.1 Error: Failed to build the bibliography via biber", " 6 Troubleshooting This chapter describes common errors you may run into, and how to fix them. 6.1 Error: Failed to build the bibliography via biber This can happen if you’ve had a failed build, perhaps in relation to RStudio shutting down abruptly. Try doing this: type make clean-knits in the terminal tab (or run file.remove(list.files(pattern = \"*.(log|mtc|maf|aux|bbl|blg|xml)\")) in the R console) to clean up files generated by LaTeX during a build restart your computer If this does not solve the problem, try using the natbib LaTeX package instead of biblatex for handling references. To do this, go to index.Rmd and set use-biblatex: false and use-natbib: true set citation_package: natbib under output: bookdown::pdf_book: citation_package: natbib "],["unidade-7.html", "7 Unidade 7", " 7 Unidade 7 "],["unidade-8.html", "8 Unidade 8", " 8 Unidade 8 "],["unidade-9.html", "9 Unidade 9", " 9 Unidade 9 "],["unidade-10.html", "10 Unidade 10", " 10 Unidade 10 "],["the-first-appendix.html", "A The First Appendix", " A The First Appendix This first appendix includes an R chunk that was hidden in the document (using echo = FALSE) to help with readibility: In 02-rmd-basics-code.Rmd library(tidyverse) knitr::include_graphics(&quot;figures/sample-content/chunk-parts.png&quot;) And here’s another one from the same chapter, i.e. Chapter 2.2: knitr::include_graphics(&quot;figures/sample-content/beltcrest.png&quot;) "],["the-second-appendix-for-fun.html", "B The Second Appendix, for Fun", " B The Second Appendix, for Fun "],["references.html", "References", " References "]]
